---
description: 
globs: 
alwaysApply: true
---
# Component Patterns and Architecture Guidelines

## Server Component Patterns

### Page Component Structure
```typescript
// Example: src/app/cars/page.tsx
import { ComponentName } from "@/features/feature-name/components/component-name";
import { getServerData } from "@/app/actions";
import { getUser } from "@/app/actions";

export const metadata = {
  title: "Page Title | Brand Name",
  description: "Page description",
};

export default async function PageName() {
  // Parallel data fetching
  const [data, user] = await Promise.all([
    getServerData(),
    getUser()
  ]);

  return <ComponentName data={data} user={user} />;
}
```

### Layout Component Pattern
```typescript
// Layout components should handle authentication and common UI
import { getUser } from "@/app/actions";
import { redirect } from "next/navigation";

export default async function LayoutName({
  children,
}: {
  children: React.ReactNode;
}) {
  const user = await getUser();
  
  if (!user) {
    redirect("/login");
  }

  return (
    <div className="layout-container">
      {/* Layout UI */}
      {children}
    </div>
  );
}
```

## Client Component Patterns

### Form Component Pattern
```typescript
"use client";

import { useState } from "react";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Button } from "@/components/ui/button";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { toast } from "sonner";
import { schema, type FormValues } from "../validations/schema";
import { submitAction } from "../actions/submit";

export function FormComponent() {
  const router = useRouter();
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<FormValues>({
    resolver: zodResolver(schema),
    defaultValues: {
      field: "",
    },
  });

  async function onSubmit(values: FormValues) {
    setIsLoading(true);
    try {
      const result = await submitAction(values);
      if (result.error) {
        toast.error(result.error);
        return;
      }
      toast.success("تم بنجاح");
      router.push("/success-route");
    } catch (error) {
      toast.error("حدث خطأ");
    } finally {
      setIsLoading(false);
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
        <FormField
          control={form.control}
          name="field"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Label</FormLabel>
              <FormControl>
                <Input {...field} disabled={isLoading} />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />
        <Button type="submit" disabled={isLoading}>
          {isLoading ? "جاري التحميل..." : "إرسال"}
        </Button>
      </form>
    </Form>
  );
}
```

### List Component Pattern
```typescript
// Feature list components for displaying data
import { Card, CardContent, CardFooter } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import Image from "next/image";
import Link from "next/link";

interface ListItem {
  id: string;
  title: string;
  description?: string;
  image?: string;
  // other properties
}

interface ListComponentProps {
  items: ListItem[];
  user?: User | null;
}

export function ListComponent({ items, user }: ListComponentProps) {
  if (items.length === 0) {
    return (
      <div className="text-center py-8">
        <p className="text-muted-foreground">لا توجد عناصر</p>
      </div>
    );
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
      {items.map((item) => (
        <Card key={item.id} className="overflow-hidden">
          {item.image && (
            <div className="relative h-48">
              <Image
                src={item.image}
                alt={item.title}
                fill
                className="object-cover"
              />
            </div>
          )}
          <CardContent className="p-4">
            <h3 className="font-semibold mb-2">{item.title}</h3>
            {item.description && (
              <p className="text-sm text-muted-foreground">{item.description}</p>
            )}
          </CardContent>
          <CardFooter className="p-4 pt-0">
            <Button asChild className="w-full">
              <Link href={`/items/${item.id}`}>
                عرض التفاصيل
              </Link>
            </Button>
          </CardFooter>
        </Card>
      ))}
    </div>
  );
}
```

## State Management Patterns

### Zustand Store Pattern
```typescript
// src/features/feature-name/store/featureStore.ts
import { create } from 'zustand';
import { persist } from 'zustand/middleware';

interface FeatureState {
  items: Item[];
  isLoading: boolean;
  error: string | null;
}

interface FeatureActions {
  addItem: (item: Item) => void;
  removeItem: (id: string) => void;
  clearItems: () => void;
  setLoading: (loading: boolean) => void;
  setError: (error: string | null) => void;
}

type FeatureStore = FeatureState & FeatureActions;

export const useFeatureStore = create<FeatureStore>()(
  persist(
    (set, get) => ({
      // State
      items: [],
      isLoading: false,
      error: null,

      // Actions
      addItem: (item) =>
        set((state) => ({
          items: [...state.items, item],
        })),

      removeItem: (id) =>
        set((state) => ({
          items: state.items.filter((item) => item.id !== id),
        })),

      clearItems: () => set({ items: [] }),

      setLoading: (isLoading) => set({ isLoading }),

      setError: (error) => set({ error }),
    }),
    {
      name: 'feature-store',
      partialize: (state) => ({ items: state.items }),
    }
  )
);
```

## Server Action Patterns

### Feature-Specific Actions
```typescript
// src/features/feature-name/actions/featureActions.ts
"use server";

import { createClient } from "@/utils/supabase/server";
import { revalidatePath } from "next/cache";
import { z } from "zod";
import { actionSchema } from "../validations/actionSchema";

export async function createItem(formData: FormData) {
  const supabase = await createClient();
  
  // Get current user
  const { data: { user }, error: authError } = await supabase.auth.getUser();
  if (authError || !user) {
    return { error: "غير مصرح", success: false };
  }

  try {
    // Validate input
    const rawData = {
      title: formData.get("title"),
      description: formData.get("description"),
    };

    const validatedData = actionSchema.parse(rawData);

    // Database operation
    const { data, error } = await supabase
      .from("table_name")
      .insert({
        ...validatedData,
        user_id: user.id,
      })
      .select()
      .single();

    if (error) {
      console.error("Database error:", error);
      return { error: "فشل في إنشاء العنصر", success: false };
    }

    revalidatePath("/feature-path");
    return { success: true, data };

  } catch (error) {
    console.error("Action error:", error);
    if (error instanceof z.ZodError) {
      return { error: "بيانات غير صحيحة", success: false };
    }
    return { error: "حدث خطأ غير متوقع", success: false };
  }
}
```

## Error Handling Patterns

### Component Error Boundaries
```typescript
// src/components/error-boundary.tsx
"use client";

import { useEffect } from "react";
import { Button } from "@/components/ui/button";

export default function Error({
  error,
  reset,
}: {
  error: Error & { digest?: string };
  reset: () => void;
}) {
  useEffect(() => {
    console.error(error);
  }, [error]);

  return (
    <div className="flex flex-col items-center justify-center min-h-[400px] space-y-4">
      <h2 className="text-xl font-semibold">حدث خطأ!</h2>
      <p className="text-muted-foreground text-center max-w-md">
        عذراً، حدث خطأ غير متوقع. يرجى المحاولة مرة أخرى.
      </p>
      <Button onClick={reset}>
        المحاولة مرة أخرى
      </Button>
    </div>
  );
}
```

### Loading States
```typescript
// src/app/loading.tsx or feature loading components
import { Skeleton } from "@/components/ui/skeleton";

export default function Loading() {
  return (
    <div className="space-y-4">
      <Skeleton className="h-8 w-[200px]" />
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {Array.from({ length: 6 }).map((_, i) => (
          <div key={i} className="space-y-3">
            <Skeleton className="h-48 w-full" />
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-4 w-3/4" />
          </div>
        ))}
      </div>
    </div>
  );
}
```

## Best Practices

1. **Always handle loading and error states** in components
2. **Use proper TypeScript interfaces** for all props and data
3. **Implement consistent error messaging** in Arabic
4. **Use Suspense boundaries** for async components
5. **Keep components focused** on single responsibilities
6. **Export components and types** from feature index files
7. **Use proper semantic HTML** for accessibility
8. **Implement responsive design** with Tailwind CSS
9. **Follow consistent naming conventions** across all files
10. **Test component edge cases** and error scenarios

Reference the existing components in [src/features/](mdc:src/features) and [src/components/](mdc:src/components) for implementation examples.
